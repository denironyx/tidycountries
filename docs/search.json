[{"path":"https://denironyx.github.io/tidycountries/articles/countries_flags.html","id":"country-flags-in-data","dir":"Articles","previous_headings":"","what":"Country Flags in Data","title":"Country Flags","text":"world increasingly interconnected, visual communication plays critical role conveying information effectively. One powerful tool arsenal use flags data visualization, particularly presenting country-level data. Flags serve just symbols national identity also enhance clarity appeal data presentations. ’s incorporating flags data analysis, tidycountries package, impactful.","code":""},{"path":"https://denironyx.github.io/tidycountries/articles/countries_flags.html","id":"a-story-using-flags","dir":"Articles","previous_headings":"Country Flags in Data","what":"A story using Flags","title":"Country Flags","text":"Imagine tasked preparing report top 10 populated countries demographic characteristics. Using tidycountries, can gather essential data also embed flags enhance presentation.","code":"# Load required libraries library(tidycountries) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(DT) library(htmltools) library(scales)  # Fetch countries information using tidycountries all_countries <- get_country_info(\"all\")  # Filter the top 5 countries by population top_10_countries <- all_countries %>%    select(common_name, official_name, region, population, flags_svg) %>%    distinct(common_name, .keep_all = TRUE) %>%  # Ensure unique entries   arrange(desc(population)) %>%    head(n = 10)  # Function to embed flag images flag_image <- function(url) {   as.character(tags$img(src = url, width = 50, height = 30))  # Convert to a character string }  # Format the population values with commas top_10_countries$population <- comma(top_10_countries$population)  # Apply the flag_image function to the flags_svg column top_10_countries$Flag <- lapply(top_10_countries$flags_svg, flag_image)  # Create the interactive table using DT datatable(   top_10_countries[, c(\"Flag\", \"common_name\", \"official_name\", \"population\")],   escape = FALSE,  # Allows HTML rendering   options = list(     pageLength = 10,   # Number of rows per page     columnDefs = list(list(className = 'dt-center', targets = \"_all\")) # Center align   ),   colnames = c(\"Flag\", \"Common Name\", \"Official Name\", \"Population\") )"},{"path":"https://denironyx.github.io/tidycountries/articles/countries_flags.html","id":"a-flag-focused-presentation","dir":"Articles","previous_headings":"Country Flags in Data","what":"A Flag-Focused Presentation","title":"Country Flags","text":"executing code, create visually appealing table showcases top ten populated countries. country accompanied flag, providing instant recognition enhancing overall clarity presentation.","code":""},{"path":"https://denironyx.github.io/tidycountries/articles/getting_started.html","id":"why-tidycountries","dir":"Articles","previous_headings":"","what":"Why tidycountries:","title":"Getting Started with tidycountries","text":"world diverse complex place, reliable accessible country-level data crucial many analyses. Whether ’re working global research project, developing visualization, simply need query country data application, tidycountries aims simplify tasks. providing country data tidy format compatible tidyverse ecosystem, tidycountries allows users seamlessly integrate manipulate country data.","code":""},{"path":"https://denironyx.github.io/tidycountries/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with tidycountries","text":"can install tidycountries package CRAN using following command:","code":"install.packages(\"tidycountries\")  # you can also install the package directly using `devtools` devtools::install_github(\"denironyx/tidycountries\")"},{"path":"https://denironyx.github.io/tidycountries/articles/getting_started.html","id":"loading-the-package","dir":"Articles","previous_headings":"Installation","what":"Loading the Package","title":"Getting Started with tidycountries","text":"installed, need load package use function","code":"library(tidyverse) library(tidycountries)"},{"path":"https://denironyx.github.io/tidycountries/articles/getting_started.html","id":"using-tidycountries","dir":"Articles","previous_headings":"","what":"Using tidycountries","title":"Getting Started with tidycountries","text":"brief overview key functions tidycountries get_country_info() - Retrieve information specific country based ’s country code common name","code":"# Get information about Nigeria nigeria_info <- get_country_info(\"Nigeria\") print(nigeria_info)  ## get information for all countries all_countries <- get_country_info(\"all\") print(head(all_countries))"},{"path":"https://denironyx.github.io/tidycountries/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dennis Irorere. Author, maintainer, copyright holder.","code":""},{"path":"https://denironyx.github.io/tidycountries/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Irorere D (2024). tidycountries: Access Manipulate Comprehensive Country Level Data Tidy Format. R package version 0.0.1, https://github.com/denironyx/tidycountries.","code":"@Manual{,   title = {tidycountries: Access and Manipulate Comprehensive Country Level Data in Tidy Format},   author = {Dennis Irorere},   year = {2024},   note = {R package version 0.0.1},   url = {https://github.com/denironyx/tidycountries}, }"},{"path":"https://denironyx.github.io/tidycountries/index.html","id":"tidycountries-r-package","dir":"","previous_headings":"","what":"Access and Manipulate Comprehensive Country Level Data in Tidy Format","title":"Access and Manipulate Comprehensive Country Level Data in Tidy Format","text":"tidycountries package provides comprehensive user-friendly interface accessing, manipulating, analyzing country-level data around world. allows users retrieve detailed information countries, including names, regions, subregions, continents, populations, currencies, calling codes, , tidy data format. package designed work seamlessly within tidyverse ecosystem, making easy filter, arrange, visualize country-level data R.","code":""},{"path":"https://denironyx.github.io/tidycountries/index.html","id":"why-tidycountries","dir":"","previous_headings":"","what":"Why tidycountries:","title":"Access and Manipulate Comprehensive Country Level Data in Tidy Format","text":"world diverse complex place, reliable accessible country-level data crucial many analyses. Whether ’re working global research project, developing visualization, simply need query country data application, tidycountries aims simplify tasks. providing country data tidy format compatible tidyverse ecosystem, tidycountries allows users seamlessly integrate manipulate country data.","code":""},{"path":"https://denironyx.github.io/tidycountries/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access and Manipulate Comprehensive Country Level Data in Tidy Format","text":"can install tidycountries package CRAN using following command:","code":"install.packages(\"tidycountries\")  # you can also install the package directly using `devtools` devtools::install_github(\"denironyx/tidycountries\")"},{"path":"https://denironyx.github.io/tidycountries/index.html","id":"loading-the-package","dir":"","previous_headings":"Installation","what":"Loading the Package","title":"Access and Manipulate Comprehensive Country Level Data in Tidy Format","text":"installed, need load package use function","code":"library(tidyverse) library(tidycountries)"},{"path":"https://denironyx.github.io/tidycountries/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 tidycountries authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"get_countries_by_currency — get_countries_by_currency","title":"get_countries_by_currency — get_countries_by_currency","text":"function retrieves list countries specified currency used. function case-insensitive matches currency name part name. output ordered alphabetically country name.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_countries_by_currency — get_countries_by_currency","text":"","code":"get_countries_by_currency(currency_input)"},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_countries_by_currency — get_countries_by_currency","text":"currency_input character string representing currency name part name. input case-insensitive.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_countries_by_currency — get_countries_by_currency","text":"data frame containing list countries use specified currency, ordered alphabetically country name. columns include country codes (CCA2 CCA3), common name, capital, continents, currency name, currency symbol, latitude, longitude.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_countries_by_currency — get_countries_by_currency","text":"function utilizes pre-loaded restcountries_data dataset. Ensure dataset loaded invoking function. function uses case-insensitive regular expression match currency name, allowing partial matches.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_currency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_countries_by_currency — get_countries_by_currency","text":"","code":"# \\donttest{ # Example usage: Find all countries that use the Euro euro_countries <- get_countries_by_currency(\"Euro\") print(euro_countries) #> # A tibble: 36 × 10 #>    cca2  cca3  common_name           capital continents currencies currency_name #>    <chr> <chr> <chr>                 <chr>   <chr>      <chr>      <chr>         #>  1 AD    AND   Andorra               Andorr… Europe     Euro €     Euro          #>  2 AT    AUT   Austria               Vienna  Europe     Euro €     Euro          #>  3 BE    BEL   Belgium               Brusse… Europe     Euro €     Euro          #>  4 HR    HRV   Croatia               Zagreb  Europe     Euro €     Euro          #>  5 CY    CYP   Cyprus                Nicosia Europe     Euro €     Euro          #>  6 EE    EST   Estonia               Tallinn Europe     Euro €     Euro          #>  7 FI    FIN   Finland               Helsin… Europe     Euro €     Euro          #>  8 FR    FRA   France                Paris   Europe     Euro €     Euro          #>  9 GF    GUF   French Guiana         Cayenne South Ame… Euro €     Euro          #> 10 TF    ATF   French Southern and … Port-a… Antarctica Euro €     Euro          #> # ℹ 26 more rows #> # ℹ 3 more variables: currency_symbol <chr>, lat <dbl>, lon <dbl>  # Example usage: Find all countries that use a currency with \"dollar\" in its name dollar_countries <- get_countries_by_currency(\"dollar\") print(dollar_countries) #> # A tibble: 58 × 10 #>    cca2  cca3  common_name           capital continents currencies currency_name #>    <chr> <chr> <chr>                 <chr>   <chr>      <chr>      <chr>         #>  1 AS    ASM   American Samoa        Pago P… Oceania    United St… United State… #>  2 AI    AIA   Anguilla              The Va… North Ame… Eastern C… Eastern Cari… #>  3 AG    ATG   Antigua and Barbuda   Saint … North Ame… Eastern C… Eastern Cari… #>  4 AU    AUS   Australia             Canber… Oceania    Australia… Australian d… #>  5 BS    BHS   Bahamas               Nassau  North Ame… Bahamian … Bahamian dol… #>  6 BB    BRB   Barbados              Bridge… North Ame… Barbadian… Barbadian do… #>  7 BZ    BLZ   Belize                Belmop… North Ame… Belize do… Belize dollar #>  8 BM    BMU   Bermuda               Hamilt… North Ame… Bermudian… Bermudian do… #>  9 IO    IOT   British Indian Ocean… Diego … Asia       United St… United State… #> 10 VG    VGB   British Virgin Islan… Road T… North Ame… United St… United State… #> # ℹ 48 more rows #> # ℹ 3 more variables: currency_symbol <chr>, lat <dbl>, lon <dbl>  # Example usage: Find all countries that use the Yen yen_countries <- get_countries_by_currency(\"Yen\") print(yen_countries) #> # A tibble: 1 × 10 #>   cca2  cca3  common_name capital continents currencies     currency_name #>   <chr> <chr> <chr>       <chr>   <chr>      <chr>          <chr>         #> 1 JP    JPN   Japan       Tokyo   Asia       Japanese yen ¥ Japanese yen  #> # ℹ 3 more variables: currency_symbol <chr>, lat <dbl>, lon <dbl> # }"},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":null,"dir":"Reference","previous_headings":"","what":"get_countries_by_region — get_countries_by_region","title":"get_countries_by_region — get_countries_by_region","text":"function retrieves list countries based specified region, subregion, continent. function case-insensitive orders countries alphabetically common names. input match region, subregion, continent, function provides list available regions, subregions, continents.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_countries_by_region — get_countries_by_region","text":"","code":"get_countries_by_region(country_region_value)"},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_countries_by_region — get_countries_by_region","text":"country_region_value character string representing region, subregion, continent. input case-insensitive.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_countries_by_region — get_countries_by_region","text":"data frame containing list countries within specified region, subregion, continent, ordered alphabetically country name. match found, warning message displayed, list available regions, subregions, continents provided.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_countries_by_region — get_countries_by_region","text":"function utilizes pre-loaded restcountries_data dataset. Ensure dataset loaded invoking function. selected columns include country codes, names, capital, region, subregion, start week, car side, currencies, population, latitude, longitude.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_countries_by_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_countries_by_region — get_countries_by_region","text":"","code":"# \\donttest{ # Example usage: Get a list of countries in Africa africa_countries <- get_countries_by_region(\"Africa\") print(africa_countries) #> # A tibble: 61 × 19 #>    cca3  cca2  common_name     official_name capital region subregion continents #>    <chr> <chr> <chr>           <chr>         <chr>   <chr>  <chr>     <chr>      #>  1 DZA   DZ    Algeria         People's Dem… Algiers Africa Northern… Africa     #>  2 AGO   AO    Angola          Republic of … Luanda  Africa Middle A… Africa     #>  3 BEN   BJ    Benin           Republic of … Porto-… Africa Western … Africa     #>  4 BWA   BW    Botswana        Republic of … Gaboro… Africa Southern… Africa     #>  5 IOT   IO    British Indian… British Indi… Diego … Africa Eastern … Asia       #>  6 BFA   BF    Burkina Faso    Burkina Faso  Ouagad… Africa Western … Africa     #>  7 BDI   BI    Burundi         Republic of … Gitega  Africa Eastern … Africa     #>  8 CMR   CM    Cameroon        Republic of … Yaoundé Africa Middle A… Africa     #>  9 CPV   CV    Cape Verde      Republic of … Praia   Africa Western … Africa     #> 10 CAF   CF    Central Africa… Central Afri… Bangui  Africa Middle A… Africa     #> # ℹ 51 more rows #> # ℹ 11 more variables: un_member <lgl>, landlocked <lgl>, timezones <chr>, #> #   start_of_week <chr>, car_side <chr>, currencies <chr>, population <int>, #> #   area <dbl>, root <chr>, lat <dbl>, lon <dbl>  # Example usage: Get a list of countries in Western Europe (a subregion) western_europe_countries <- get_countries_by_region(\"Western Europe\") print(western_europe_countries) #> # A tibble: 8 × 19 #>   cca3  cca2  common_name   official_name    capital region subregion continents #>   <chr> <chr> <chr>         <chr>            <chr>   <chr>  <chr>     <chr>      #> 1 BEL   BE    Belgium       Kingdom of Belg… Brusse… Europe Western … Europe     #> 2 FRA   FR    France        French Republic  Paris   Europe Western … Europe     #> 3 DEU   DE    Germany       Federal Republi… Berlin  Europe Western … Europe     #> 4 LIE   LI    Liechtenstein Principality of… Vaduz   Europe Western … Europe     #> 5 LUX   LU    Luxembourg    Grand Duchy of … Luxemb… Europe Western … Europe     #> 6 MCO   MC    Monaco        Principality of… Monaco  Europe Western … Europe     #> 7 NLD   NL    Netherlands   Kingdom of the … Amster… Europe Western … Europe     #> 8 CHE   CH    Switzerland   Swiss Confedera… Bern    Europe Western … Europe     #> # ℹ 11 more variables: un_member <lgl>, landlocked <lgl>, timezones <chr>, #> #   start_of_week <chr>, car_side <chr>, currencies <chr>, population <int>, #> #   area <dbl>, root <chr>, lat <dbl>, lon <dbl>  # Example usage: Get a list of countries in the continent of Asia asia_countries <- get_countries_by_region(\"Asia\") print(asia_countries) #> # A tibble: 56 × 19 #>    cca3  cca2  common_name     official_name capital region subregion continents #>    <chr> <chr> <chr>           <chr>         <chr>   <chr>  <chr>     <chr>      #>  1 AFG   AF    Afghanistan     Islamic Repu… Kabul   Asia   Southern… Asia       #>  2 ARM   AM    Armenia         Republic of … Yerevan Asia   Western … Asia       #>  3 AZE   AZ    Azerbaijan      Republic of … Baku    Asia   Western … Europe     #>  4 AZE   AZ    Azerbaijan      Republic of … Baku    Asia   Western … Asia       #>  5 BHR   BH    Bahrain         Kingdom of B… Manama  Asia   Western … Asia       #>  6 BGD   BD    Bangladesh      People's Rep… Dhaka   Asia   Southern… Asia       #>  7 BTN   BT    Bhutan          Kingdom of B… Thimphu Asia   Southern… Asia       #>  8 IOT   IO    British Indian… British Indi… Diego … Africa Eastern … Asia       #>  9 BRN   BN    Brunei          Nation of Br… Bandar… Asia   South-Ea… Asia       #> 10 KHM   KH    Cambodia        Kingdom of C… Phnom … Asia   South-Ea… Asia       #> # ℹ 46 more rows #> # ℹ 11 more variables: un_member <lgl>, landlocked <lgl>, timezones <chr>, #> #   start_of_week <chr>, car_side <chr>, currencies <chr>, population <int>, #> #   area <dbl>, root <chr>, lat <dbl>, lon <dbl> # }"},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":null,"dir":"Reference","previous_headings":"","what":"get_country_by_calling_code — get_country_by_calling_code","title":"get_country_by_calling_code — get_country_by_calling_code","text":"function retrieves information countries based specified calling code part . input can root calling code, suffix, full calling code, function case-insensitive.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_country_by_calling_code — get_country_by_calling_code","text":"","code":"get_country_by_calling_code(call_code)"},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_country_by_calling_code — get_country_by_calling_code","text":"call_code character string representing calling code, root calling code, suffix. input case-insensitive.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_country_by_calling_code — get_country_by_calling_code","text":"data frame containing list countries match provided calling code. columns include country codes (CCA2 CCA3), common name, official name, capital, region, subregion, continents, currencies, calling code details (root, suffixes, full calling code), geographic coordinates (latitude longitude).","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_country_by_calling_code — get_country_by_calling_code","text":"function relies pre-loaded restcountries_data dataset. Ensure dataset loaded invoking function. function searches across root calling code, suffixes, full calling code using case-insensitive matching.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_by_calling_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_country_by_calling_code — get_country_by_calling_code","text":"","code":"# \\donttest{ # Example usage: Find country information by root calling code us_info <- get_country_by_calling_code(\"+1\") print(us_info) #> # A tibble: 344 × 14 #>    cca3  cca2  common_name     official_name capital region subregion continents #>    <chr> <chr> <chr>           <chr>         <chr>   <chr>  <chr>     <chr>      #>  1 AIA   AI    Anguilla        Anguilla      The Va… Ameri… Caribbean North Ame… #>  2 ASM   AS    American Samoa  American Sam… Pago P… Ocean… Polynesia Oceania    #>  3 ATG   AG    Antigua and Ba… Antigua and … Saint … Ameri… Caribbean North Ame… #>  4 BHS   BS    Bahamas         Commonwealth… Nassau  Ameri… Caribbean North Ame… #>  5 BMU   BM    Bermuda         Bermuda       Hamilt… Ameri… North Am… North Ame… #>  6 BRB   BB    Barbados        Barbados      Bridge… Ameri… Caribbean North Ame… #>  7 CAN   CA    Canada          Canada        Ottawa  Ameri… North Am… North Ame… #>  8 CYM   KY    Cayman Islands  Cayman Islan… George… Ameri… Caribbean North Ame… #>  9 DMA   DM    Dominica        Commonwealth… Roseau  Ameri… Caribbean North Ame… #> 10 DOM   DO    Dominican Repu… Dominican Re… Santo … Ameri… Caribbean North Ame… #> # ℹ 334 more rows #> # ℹ 6 more variables: currencies <chr>, root <chr>, suffixes <chr>, #> #   calling_code <chr>, lat <dbl>, lon <dbl>  # Example usage: Find country information by calling code suffix uk_info <- get_country_by_calling_code(\"44\") print(uk_info) #> # A tibble: 1 × 14 #>   cca3  cca2  common_name official_name      capital region subregion continents #>   <chr> <chr> <chr>       <chr>              <chr>   <chr>  <chr>     <chr>      #> 1 AGO   AO    Angola      Republic of Angola Luanda  Africa Middle A… Africa     #> # ℹ 6 more variables: currencies <chr>, root <chr>, suffixes <chr>, #> #   calling_code <chr>, lat <dbl>, lon <dbl>  # Example usage: Find country information by full calling code india_info <- get_country_by_calling_code(\"+91\") print(india_info) #> # A tibble: 1 × 14 #>   cca3  cca2  common_name official_name     capital  region subregion continents #>   <chr> <chr> <chr>       <chr>             <chr>    <chr>  <chr>     <chr>      #> 1 IND   IN    India       Republic of India New Del… Asia   Southern… Asia       #> # ℹ 6 more variables: currencies <chr>, root <chr>, suffixes <chr>, #> #   calling_code <chr>, lat <dbl>, lon <dbl> # }"},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":null,"dir":"Reference","previous_headings":"","what":"get_country_info — get_country_info","title":"get_country_info — get_country_info","text":"function retrieves information specific country based country code (cca2 cca3) common name. function case-insentive provides comprehensive overview selected country \"\" passed input, returns data countries. input match country, function returns list available country names.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_country_info — get_country_info","text":"","code":"get_country_info(country_value)"},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_country_info — get_country_info","text":"country_value character string representing country code(cca2 cca3) common name. input case-insensitive. \"\" passed, function return data countries.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_country_info — get_country_info","text":"data frame selected country information. input \"\", returns data countries. match found, list available country names printed.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get_country_info — get_country_info","text":"data frame selected country information. input \"\", returns data countries. match found, list available country names printed","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/get_country_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_country_info — get_country_info","text":"","code":"# \\donttest{ # Examples usage: Get information for Nigeria nigeria_info <- get_country_info(\"Nigeria\") print(nigeria_info) #> # A tibble: 1 × 19 #>   cca3  cca2  common_name official_name      capital region subregion continents #>   <chr> <chr> <chr>       <chr>              <chr>   <chr>  <chr>     <chr>      #> 1 NGA   NG    Nigeria     Federal Republic … Abuja   Africa Western … Africa     #> # ℹ 11 more variables: un_member <lgl>, landlocked <lgl>, timezones <chr>, #> #   start_of_week <chr>, car_side <chr>, currencies <chr>, population <int>, #> #   area <dbl>, root <chr>, lat <dbl>, lon <dbl>  # Example usage: Get information for a country using it's cca2 code usa_info <- get_country_info(\"US\") print(usa_info) #> # A tibble: 1 × 19 #>   cca3  cca2  common_name   official_name    capital region subregion continents #>   <chr> <chr> <chr>         <chr>            <chr>   <chr>  <chr>     <chr>      #> 1 USA   US    United States United States o… Washin… Ameri… North Am… North Ame… #> # ℹ 11 more variables: un_member <lgl>, landlocked <lgl>, timezones <chr>, #> #   start_of_week <chr>, car_side <chr>, currencies <chr>, population <int>, #> #   area <dbl>, root <chr>, lat <dbl>, lon <dbl> # }"},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"restcountries_tidy_data — restcountries_tidy_data","title":"restcountries_tidy_data — restcountries_tidy_data","text":"dataset containing tidied information countries Restcountries API.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"restcountries_tidy_data — restcountries_tidy_data","text":"","code":"restcountries_tidy_data"},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"restcountries_tidy_data — restcountries_tidy_data","text":"data frame several rows following columns: tld Top-level domain(s) associated country. common_name Common name country. official_name Official name country. cca2 Country code (2-letter). cca3 Country code (3-letter). fifa FIFA code country. independent Independence status (TRUE/FALSE). status Country status (e.g., officially assigned). un_member Whether country UN member (TRUE/FALSE). region Geographic region. subregion Subregion. population Population country. capital Capital city country. capital_lat Latitude capital city. capital_lon Longitude capital city. continents Continent(s) country part . lat Latitude country. lon Longitude country. landlocked Whether country landlocked (TRUE/FALSE). borders Countries share border. area Total area country square kilometers. start_of_week Day week starts (e.g., Monday). timezones Timezones applicable country. root Root country calling code. suffixes Suffixes country calling code. car_side side road cars drive . googlemaps Google Maps link country. openstreetmaps OpenStreetMap link country. flags_png URL PNG image country flag. flags_svg URL SVG image country flag. flags_alt Alternative text country flag. currencies Currencies used country. languages Languages spoken country. currency_name Name primary currency used. currency_symbol Symbol primary currency used. calling_code Calling code(s) associated country.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"restcountries_tidy_data — restcountries_tidy_data","text":"Data obtained Restcountries Json file processed use package.","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"restcountries_tidy_data — restcountries_tidy_data","text":"dataset includes variety country-level data country codes, names, capitals, regions, subregions, continents, currencies, population, geographic coordinates, languages, .","code":""},{"path":"https://denironyx.github.io/tidycountries/reference/restcountries_tidy_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"restcountries_tidy_data — restcountries_tidy_data","text":"","code":"# Load the dataset and view the first few rows data(restcountries_tidy_data) head(restcountries_tidy_data) #> # A tibble: 6 × 36 #>   tld   common_name official_name cca2  cca3  fifa  independent status un_member #>   <chr> <chr>       <chr>         <chr> <chr> <chr> <lgl>       <chr>  <lgl>     #> 1 .aw   Aruba       Aruba         AW    ABW   \"ARU\" FALSE       offic… FALSE     #> 2 .af   Afghanistan Islamic Repu… AF    AFG   \"AFG\" TRUE        offic… TRUE      #> 3 .ao   Angola      Republic of … AO    AGO   \"ANG\" TRUE        offic… TRUE      #> 4 .ai   Anguilla    Anguilla      AI    AIA   \"AIA\" FALSE       offic… FALSE     #> 5 .ax   Åland Isla… Åland Islands AX    ALA   \"\"    FALSE       offic… FALSE     #> 6 .al   Albania     Republic of … AL    ALB   \"ALB\" TRUE        offic… TRUE      #> # ℹ 27 more variables: region <chr>, subregion <chr>, population <int>, #> #   capital <chr>, capital_lat <dbl>, capital_lon <dbl>, continents <chr>, #> #   lat <dbl>, lon <dbl>, landlocked <lgl>, borders <list>, area <dbl>, #> #   start_of_week <chr>, timezones <chr>, root <chr>, suffixes <chr>, #> #   car_side <chr>, googlemaps <chr>, openstreetmaps <chr>, flags_png <chr>, #> #   flags_svg <chr>, flags_alt <chr>, currencies <chr>, languages <chr>, #> #   currency_name <chr>, currency_symbol <chr>, calling_code <chr>"},{"path":"https://denironyx.github.io/tidycountries/news/index.html","id":"tidycountries-001","dir":"Changelog","previous_headings":"","what":"tidycountries 0.0.1","title":"tidycountries 0.0.1","text":"CRAN release: 2024-09-12 Initial CRAN submission.","code":""}]
